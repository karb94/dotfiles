#! /bin/env bash

# Script to download videos form youtube with notification popup

floating_rule() {
  bspc rule \
    --add mpv \
    --one-shot \
    desktop="$(bspc query -D -d focused)" \
    state=floating
}

# If no url was passed get it from the clipboard
test -n "$1" && export url="$1" || export url=$(xsel -p)

metadata=$(mktemp)
if youtube-dl -J "$url" >"$metadata" 2>/dev/null; then
  :
else
  rm "$metadata"
  action=$(dunstify \
    --timeout=1000000 \
    --action=play,label \
    "Unkown video [LIVE]")
  if [ "$action" = "play" ]; then
    floating_rule
    mpv --no-terminal --ytdl "$url" || exit 1
  fi
  exit 0
fi

export video_id="$(jq --raw-output '.id' "$metadata")"
video_path=/tmp/"${video_id}".mkv
duration="$(jq --raw-output '.duration' "$metadata")"
thumbnail_url="$(jq --raw-output '.thumbnail' "$metadata")"
echo $thumbnail_url
export title="$(jq --raw-output '.title' "$metadata" | fold -sw 30 -)"
export creator="$(jq --raw-output '.uploader' "$metadata")"
echo $thumbnail_url

export thumbnail=$(mktemp)
curl -s "$thumbnail_url" >"$thumbnail"
# Convert into png/jpg format if necessary
if file "$thumbnail" | grep -q 'Web/P image'; then
  dwebp -quiet "$thumbnail" -o "$thumbnail".png
  rm "$thumbnail"
  thumbnail="$thumbnail".png
fi

# If it's a live stream
if jq --exit-status '.is_live' "$metadata" >/dev/null; then
  # Show notification
  action=$(dunstify \
    --timeout=1000000 \
    --icon="$thumbnail" \
    --action=play,label \
    --hints=string:x-dunst-stack-tag:"$video_id" \
    "$creator [LIVE]" "$title")
  if [ "$action" = "play" ]; then
    floating_rule
    mpv --no-terminal --ytdl "$url" || exit 1
  fi
  exit 0
fi

exit_code=0
# If file already exists print path and exit if not, download it
if [ ! -f "$video_path" ]; then
  progress_bar() {
    if [ "$1" != 100 ]; then
      dunstify \
        --timeout=60000 \
        --icon="$thumbnail" \
        --action=cancel,label \
        --hints=int:value:"$1" \
        --hints=string:x-dunst-stack-tag:"$video_id" \
        "$creator" "$title"
    else
      dunstify \
        --timeout=1000 \
        --icon="$thumbnail" \
        --action=cancel,label \
        --hints=int:value:"$1" \
        --hints=string:x-dunst-stack-tag:"$video_id" \
        "$creator" "$title"
    fi
  }
  cancelled_notification() {
    dunstify \
      --timeout=5000 \
      --icon="$thumbnail" \
      --hints=string:x-dunst-stack-tag:"${video_id}" \
      "$creator [CANCELLED]" "$title" >/dev/null
  }

  export format='/tmp/%(id)s.%(ext)s'
  export -f progress_bar
  declare -f progress_bar
  download_notify() {
    youtube-dl --no-post-overwrites --output "$format" "$url" |
      stdbuf -oL tr '\r' '\n' |
      grep --line-buffered -Po '\d+(?=\.\d+%)' |
      xargs \
        -P 0 -I'{}' bash -c '[ "$(progress_bar {})" = "cancel" ] && \
        pkill -P '"$$"' youtube-dl && exit 255'
  }
  export -f download_notify
  # Download the video and pipe the progress to notify-send
  timeout $((duration / 20))s bash -c download_notify
  exit_code=$?
  if [ $exit_code = 124 ]; then
    for run in {1..10}; do
      dunstify \
        --timeout=5000 \
        --icon="$thumbnail" \
        --hints=string:x-dunst-stack-tag:"${video_id}" \
        "$creator [RESTARTING]" "$title" >/dev/null
      timeout $((duration / 20))s bash -c download_notify
      exit_code=$?
      [ $exit_code = 0 ] && break
    done
  fi
fi

# If the video was downloaded successfully
if [ -f "$video_path" ]; then
  # Print video path
  printf '%s' "$video_path"
  completed_notify() {
    dunstify \
      --timeout=1000000 \
      --icon="$thumbnail" \
      --action=play,label \
      --hints=string:x-dunst-stack-tag:"${video_id}" \
      "$creator [READY]" "$title"
  }
  floating_rule() {
    bspc rule \
      --add mpv \
      --one-shot \
      desktop="$(bspc query -D -d focused)" \
      state=floating
  }
  # Show notification
  action=$(completed_notify)
  [ "$action" = "play" ] &&
    floating_rule &&
    mpv --geometry=70% --no-terminal "$video_path" &&
    rm "$thumbnail" "${video_path%.*}"*
else
  dunstify \
    --timeout=5000 \
    --icon="$thumbnail" \
    --action=play,label \
    --hints=string:x-dunst-stack-tag:"${video_id}" \
    "$creator [CANCELLED]" "$title" >/dev/null

  rm "$thumbnail" "${video_path%.*}"*
fi
