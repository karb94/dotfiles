#! /bin/sh

# Script to download videos form youtube with notification popup

completed_notify () {
    dunstify                                            \
        --timeout=1000000                               \
        --icon="$thumbnail"                             \
        --action=play,label                             \
        --hints=string:x-dunst-stack-tag:"${video_id}"  \
        "$creator [LIVE]" "$title"
    }
floating_rule () {
    bspc rule                           \
        --add mpv                       \
        --one-shot                      \
        desktop="$(bspc query -D -d)"   \
        state=floating
    }

export url="$1"

metadata=$(mktemp)
youtube-dl -J "$url" > "$metadata"
# If it's a live stream
if jq --exit-status '.is_live' "$metadata" >/dev/null
then
    # Show notification
    action=$(completed_notify)
    [ "$action" = "play" ] &&
        floating_rule &&
        youtube-dl -o - "$url" | mpv --no-terminal "$video_path" &&
        exit 0
fi

export video_id="$(jq --raw-output '.id' "$metadata")"
video_path=/tmp/"${video_id}".mkv
length="$(jq --raw-output '.duration' "$metadata")"
thumbnail_url="$(jq --raw-output '.thumbnail' "$metadata")"
export title="$(jq --raw-output '.title' "$metadata" | fold -sw 30 -)"
export creator="$(jq --raw-output '.uploader' "$metadata")"


export thumbnail=$(mktemp)
curl -s "$thumbnail_url" > "$thumbnail"
# Convert into png/jpg format if necessary
if  [ 'png' != "${thumbnail_url##*.}" ] &&
    [ 'jpg' != "${thumbnail_url##*.}" ] &&
    [ -n "${thumbnail_url##*jpg*}" ]
then
    dwebp -quiet "$thumbnail" -o "$thumbnail".png
    rm "$thumbnail"
    thumbnail="$thumbnail".png
fi

exit_code=0
# If file already exists print path and exit if not, download it
if [ ! -f "$video_path" ]
then
    export format='/tmp/%(id)s.%(ext)s'
    yt_notify () {
        dunstify \
            --timeout=60000                                 \
            --icon="$thumbnail"                             \
            --hints=int:value:"$1"                          \
            --hints=string:x-dunst-stack-tag:"$video_id"    \
            "$creator" "$title"
    }
    export -f yt_notify
    download_notify () {
        youtube-dl --no-post-overwrites --output "$format" "$url" |
            stdbuf -oL tr '\r' '\n' |
            stdbuf -oL grep -Po '\d+(?=\.\d+%)' |
            parallel yt_notify
    }
    export -f download_notify

    # Download the video and pipe the progress to notify-send
    timeout --preserve-status 30s sh -c download_notify
    exit_code=$?
    if [ $exit_code != 0 ]
    then
        for run in {1..10}
        do
            timeout --preserve-status 15s sh -c download_notify
            exit_code=$?
            [ $exit_code = 0 ] && break
        done
    fi
fi

# If the video was downloaded successfully
if [ $exit_code = 0 ]
then
    # Print video path
    printf '%s' "$video_path"
    completed_notify () {
        dunstify                                            \
            --timeout=1000000                               \
            --icon="$thumbnail"                             \
            --action=play,label                             \
            --hints=string:x-dunst-stack-tag:"${video_id}"  \
            "$creator [READY]" "$title"
    }
    floating_rule () {
        bspc rule                           \
            --add mpv                       \
            --one-shot                      \
            desktop="$(bspc query -D -d)"   \
            state=floating
    }
    # Show notification
    action=$(completed_notify)
    [ "$action" = "play" ] &&
        floating_rule &&
        mpv --no-terminal "$video_path" &&
        rm "$thumbnail" "${video_path%.*}"*
else
    dunstify                                            \
        --timeout=5000                                  \
        --icon="$thumbnail"                             \
        --action=play,label                             \
        --hints=string:x-dunst-stack-tag:"${video_id}"  \
        "$creator [CANCELLED]" "$title" >/dev/null 

    rm "$thumbnail" "${video_path%.*}"*
fi
